using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace CompiCpp
{
    public class Sintactico
    {
        NodoVariable variableSentencia = new NodoVariable();
        NodoMetodo metodoSentencia = new NodoMetodo();
        int contadorSentencia;
        NodoSobrecarga sobrecargaSentencia = new NodoSobrecarga();
        NodoVariable nuevaVariable = new NodoVariable();
        NodoSobrecarga sobrecargaActual = new NodoSobrecarga();
        NodoMetodo metodoListado = new NodoMetodo();
        NodoClase claseActual = new NodoClase();
        List<NodoLexema> listener = new List<NodoLexema>();
        bool ConSobrecarga = false;
        List<string> herencia = new List<string>();
        List<NodoLexema> listaTokens;  // va ser una copia de la lista de tokens original
        public List<string> listaSintaxis = new List<string>();
        string metodoActual;
        public bool error = false; // bandera de errores
        bool revision = false;   // bandera para decidir si sigo analisando o me salgo.
        public String Termino = "";
        int punteroLexico = 0;      // punteros de la lista de tokens y de la lista del analizador sintactico
        int punteroSintactico = 1;
        int contSobrecarga = 0;
        int regla;
        private int[] listaSintactico = new int[500]; // analizador sintactico LIFO
        TipoSemantico sem;
        TipoSemantico semAux;
        //aqui xd
        public int[,] MatrizTransicionSintantico = new int[,]
{

  //,	,	*/{,	id (-1),	Num E (-2),	Num D (-3),	.+(-4),	.- (-5),	*(-6),	/(-7),	%(-8),	.++(-9),	−−(-10),	==(-11),	!=(-12),	>(-13),	<(-14),	>=(-15),	<=(-16),	&&(-17),	||(-18),	!(-19),	<<(-20),	>>(-21),	~(-22),	&(-23),	^(-24),	|(-25),	.=(-26),	+=(-27),	-=(-28),	*=(-29),	/=(-30),	%=(-31),	,(-32),	.(-33),	“…”(-34),	‘…’(-35),	:(-36),	;(-37),	((-38),	)(-39),	[(-40),	](-41),	{(-42),	}(-43),	asm(-100),	else(-101),	new(-102),	This(-103),	auto(-104),	enum(-105),	operator(-106),	Throw(-107),	bool(-108),	explicit(-109),	private(-110),	true(-111),	break(-112),	export(-113),	protected(-114),	try(-115),	case(-116),	extern(-117),	public(-118),	typedef(-119),	catch(-120),	false(-121),	register(-122),	typeid(-123),	char(-124),	float(-125),	reinterpret_cast(-126),	typename(-127),	class(-128),	for(-129),	return(-130),	union(-131),	const(-132),	friend (-133),	short(-134),	unsigned(-135),	const_cast(-136),	goto(-137),	signed(-138),	using(-139),	continue(-140),	if(-141),	sizeof(-142),	Virtual(-143),	default(-144),	inline(-145),	static(-146),	Void(-147),	delete(-148),	int(-149),	static_cast(-150),	Volatile(-151),	do(-152),	long(-153),	struct(-154),	wchar_t(-155),	double(-156),	mutable(-157),	switch(-158),	While(-159),	dynamic_cast(-160),	namespace(-161),	template(-162),	#include(-163),	string(-164),	  $ ,	std,	cout,	cin,	
/*,	s,	*/{},
/*,	Programa,	*/{},
/*,	Librerias,	*/{},
/*,	Librería,	*/{},
/*,	<clases>,	*/{},
/*,	<clases1>,	*/{},
/*,	<clase>,	*/{},
/*,	<herencia>,	*/{},
/*,	<alcance>,	*/{    -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   13, -600,   -600,   -600,   14, -600,   -600,   -600,   12, -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   },
/*,	<miembros>,	*/{},
/*,	<miembro>,	*/{    17, -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   150,    -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   17, -600,   17, -600,   -600,   -600,   17, -600,   -600,   -600,   17, -600,   -600,   -600,   -600,   -600,   17, 17, -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   17, -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   17, 17, -600,   17, -600,   -600,   -600,   17, -600,   -600,   17, -600,   -600,   -600,   -600,   -600,   -600,   -600,   17, -600,   -600,   -600,   -600,   },
/*,	<metratibcon> ,	*/{    21, -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   142,    -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   18, -600,   142,    -600,   -600,   -600,   142,    -600,   -600,   -600,   142,    -600,   -600,   -600,   -600,   -600,   18, 18, -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   18, -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   18, 18, -600,   18, -600,   -600,   -600,   18, -600,   -600,   18, -600,   -600,   -600,   -600,   -600,   -600,   -600,   18, -600,   -600,   -600,   -600,   },
/*,	<alcance1>,	*/{},
/*,	<metratibcon1>,	*/{},
/*,	<metvoid>,	*/{},
/*,	<metratibcon2>,	*/{},
/*,	<devuelve>,	*/{},
/*,	<Especificacion>,	*/{},
/*,	< concstructor >,	*/{},
/*,	<parámetros1>,	*/{},
/*,	<tipo>,	*/{},
/*,	<parámetros>,	*/{    -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   42, -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   41, -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   41, 41, -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   41, -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   41, -600,   -600,   -600,   41, -600,   -600,   41, -600,   -600,   -600,   -600,   -600,   -600,   -600,   41, -600,   -600,   -600,   -600,   },
/*,	<asignacion1> ,	*/{    -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   45, -600,   -600,   -600,   -600,   -600,   151,    -600,   -600,   -600,   -600,   151,    -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   },
/*,	<exp> 23,	*/{},
/*,	<factor> ,	*/{    48, 50, 51, -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   49, 146,    -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   },
/*,	<termino>,	*/{    -600,   -600,   -600,   53, 53, 53, 53, 53, -600,   -600,   52, 52, 52, 52, 52, 52, 52, 52, -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   52, -600,   -600,   -600,   -600,   52, -600,   52, -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   },
/*,	<operarit>,	*/{    -600,   -600,   -600,   54, 55, 56, 57, 147,    -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   },
/*,	<sentencias>,	*/{},
/*,	<sentencia>,	*/{},
/*,	<valores>,	*/{},
/*,	<valores1>30,	*/{},
/*,	<if> ,	*/{},
/*,	<condiciona> ,	*/{},
/*,	<factorCond>,	*/{    77, 77, 77, -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   77, 77, -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   75, -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   76, -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   },
/*,	<terminoCond>,	*/{    -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   79, 79, -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   78, -600,   78, -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   },
/*,	<oprel> 35,	*/{    -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   84, 85, 80, 81, 82, 83, -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   },
/*,	<opLog> ,	*/{},
/*,	<else> ,	*/{},
/*,	<else1>,	*/{},
/*,	<for>,	*/{    -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   92, -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   },
/*,	<decasig> ,	*/{},
/*,	<declaracion> ,	*/{    -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   95, -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   95, 95, -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   95, -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   95, -600,   -600,   -600,   95, -600,   -600,   95, -600,   -600,   -600,   -600,   -600,   -600,   -600,   95, -600,   -600,   -600,   -600,   },
/*,	<multiples> ,	*/{},
/*,	<asignación>,	*/{},
/*,	<incremento>,	*/{    -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   100,    101,    -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   99, 99, 99, 99, 99, -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   },
/*,	<opasig>,	*/{    -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   102,    103,    104,    105,    106,    -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   },
/*,	<while>,	*/{},
/*,	<do> ,	*/{},
/*,	<invocar> ,	*/{},
/*,	<obj>,	*/{},
/*,	<paramobj>,	*/{},
/*,	<paramobj1>,	*/{},
/*,	<switch>,	*/{},
/*,	<CASOS> ,	*/{},
/*,	<CASO>,	*/{},
/*,	<DEFAULT> ,	*/{},
/*,	<RB> ,	*/{    -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   123,    -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   122,    -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   },
/*,	<Metodos>,	*/{},
/*,	<Metodos1>,	*/{    -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   126,    -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   126,    126,    -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   126,    -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   126,    126,    -600,   126,    -600,   -600,   -600,   126,    -600,   -600,   126,    -600,   -600,   -600,   -600,   -600,   -600,   -600,   126,    -600,   -600,   -600,   -600,   },
/*,	<Metodos2>,	*/{    -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   127,    -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   127,    127,    -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   127,    -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   127,    -600,   127,    -600,   -600,   -600,   127,    -600,   -600,   127,    -600,   -600,   -600,   -600,   -600,   -600,   -600,   127,    -600,   -600,   -600,   -600,   },
/*,	<Metodos3>,	*/{    -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   131,    -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   131,    131,    -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   131,    -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   128,    -600,   131,    -600,   -600,   -600,   131,    -600,   -600,   131,    -600,   -600,   -600,   -600,   -600,   -600,   -600,   131,    -600,   -600,   -600,   -600,   },
/*,	<Void1>,	*/{},
/*,	<Metodos4>,	*/{    -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   135,    -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   136,    132,    -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   },
/*,	<Metodos5> ,	*/{},
/*,	<Especificacion1>,	*/{    -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   139,    -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   139,    139,    -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   139,    -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   138,    139,    -600,   139,    -600,   -600,   -600,   139,    -600,   -600,   139,    -600,   -600,   -600,   -600,   -600,   -600,   -600,   139,    -600,   -600,   -600,   -600,   },
/*,	<try>,	*/{},
/*,	<metasig> ,	*/{    151,    -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   141,    -600,   -600,   -600,   -600,   -600,   141,    -600,   -600,   -600,   -600,   141,    -600,   -600,   -600,   -600,   -600,   151,    -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   151,    -600,   151,    -600,   -600,   -600,   151,    -600,   -600,   -600,   151,    -600,   -600,   -600,   -600,   -600,   151,    151,    -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   151,    -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   151,    151,    -600,   151,    -600,   -600,   -600,   151,    -600,   -600,   151,    -600,   -600,   -600,   -600,   -600,   -600,   -600,   151,    -600,   -600,   -600,   -600,   },
/*,	<parat> ,	*/{    -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   149,    -600,   -600,   -600,   -600,   -600,   149,    -600,   -600,   -600,   -600,   149,    148,    -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   -600,   },
/*,	<E/S>,	*/{},
/*,	<Salida>,	*/{},
/*,	<SalidaTermino>,	*/{},
/*,	<Entrada>,	*/{},

      };
        public int[,] RepositorioReglas = new int[,]
       {
            /*1	<s>	*/{ 1001,   -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
           /*	<programa>	*/{ 1057,   1004,   1002,   -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
        //    /* 2 <programa>  */{  1004, 1002,   -999  ,0,0   ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*	3<librerías>	*/{ 1002,   1003,   -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*4	<librerías>	*/{ -79,    -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*5	<librería>	*/{ -13,    -1, -14,    -163,   -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*6	<clases>	*/{ 1005,   1006,   -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*7	<clases1>	*/{ 1005,   1006,   -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*8	<clases1>	*/{ -79,    -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*9	<clase>	*/{ -37,    -43,     1009,  -42,     1007,  -1, -128,   -999    ,0  ,0  ,0  ,0  },
															
            /*10<herencia>	*/{ -1, 1008,   -36,    -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*11<herencia>	*/{ -79,    -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*12<alcance>	*/{ -118,   -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*13<alcance>	*/{ -110,   -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*14<alcance>	*/{ -114,   -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*15<miembros>	*/{ -79,    -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*16<miembros>	*/{ 1009,   1010,   -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*17<miembro>	*/{ 1011,   1012,-999  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
															
            /*18<metratibcon>	*/{ 1013,   1017,   -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*19<alcance1>	*/{ -36,    1008,   -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*20<alcance1>	*/{ -79,    -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*21<metratibcon>	*/{ 1018,   -999 ,0    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*22<metratibcon1>	*/{ 1014,   -39,    1021,   -38,    -1, -147,   -999    ,0  ,0  ,0  ,0  ,0  },
            /*23<metvoid>	*/{ -37,    -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*24<metvoid>	*/{ -43,    1027,   -42,    -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*25<Met>	*/{ -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
           
            /*26<metratibcon1>	*/{  1066, 1067,-1, 1020, -999,0,0    ,0  ,0  ,0  ,0  ,0  },
            /*27<metratibcon2>	*/{ -43,    1016,   1027,   -42,    -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
														
            /*28< metratibcon2>	*/{ -37,    -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*29<devuelve>	*/{ -37,1023,  -130,   -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*30<devuelve>	*/{ -79,    -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*31<Especificacion>	*/{ -146,   -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*32<Especificacion>	*/{ -79,    -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*33< concstructor>	*/{ -43,    1027,   -42,    -39,    1021,   -38,    -1, -999    ,0  ,0  ,0  ,0  },
            /*34<parámetros1>	*/{ 1020,  -1, 1020,   -32,    -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*35<parametros1>	*/{ -79,    -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*36<tipo>	*/{ -149,   -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*37<tipo>	*/{ -164,   -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
															
            /*38<tipo>	*/{ -156,   -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*39<tipo>	*/{ -124,   -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*40<tipo>	*/{ -125,   -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*41<parámetros>	*/{ 1019,   -1, 1020,   -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*42<parámetros>	*/{ -79,    -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*43<parámetros1>	*/{ 1019,   -1, 1020,   -32,    -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*44<parametros1>	*/{ -79,    -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*45<asignacion1> 	*/{ 1042,1023,   -26,    -999      ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*46<instancia>	*/{ -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*47<exp>	*/{ 1025,   1024,   -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
														
            /*48<factor>	*/{ -1, -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*49<factor>	*/{ -34,    -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*50<factor>	*/{ -2, -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*51<factor>	*/{ -3, -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*52<termino>	*/{ -79,    -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*53<termino>	*/{ 1023,   1026,   -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*54<operarit>	*/{ -4, -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*55<operarit>	*/{ -5, -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*56<operarit>	*/{ -6, -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*57<operarit>	*/{ -7, -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
															
            /*58<sentencias>	*/{ 1027,   1028,   -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*59<sentencias>	*/{ -79,    -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*60<sentencia>	*/{ 1031,   -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*61<sentencia>	*/{ 1039,   -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*62<sentencia>	*/{ 1046,   -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*63<sentencia>	*/{ -37,1043,   -999   ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*64<sentencia>	*/{ -37,1041,   -999      ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*65<sentencia>	*/{ 1047,   -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*66<sentencia>	*/{ 1052,   -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*67<sentencia>	*/{ 1065,   -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
															
            /*68<sentencia>	*/{ 1048,   -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*69<valores>	*/{ 1030,   1024,   -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*70<valores>	*/{ -79,    -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*71<valores1>	*/{ 1030,   1024,   -32,    -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*72<valores1>	*/{ -79,    -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*73<if>	*/{ 1037,   -43,    1027,   -42,    -39,    1032,   -38,    -141,   -999    ,0  ,0  ,0  },
            /*74<condiciona>	*/{ 1034,   1033,   -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*75<factorCond>	*/{ -111,   -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*76<factorCond>	*/{ -121,   -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*77<factorCond>	*/{ 1023,   1035,   1023,   -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
															
            /*78<terminoCond>	*/{ -79,    -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*79<terminoCond>	*/{ 1032,   1036,   -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*80<oprel>	*/{ -13,    -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*81<oprel>	*/{ -14,    -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*82<oprel>	*/{ -15,    -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*83<oprel>	*/{ -16,    -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*84<oprel>	*/{ -11,    -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*85<oprel>	*/{ -12,    -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*86<opLog>	*/{ -17,    -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*87<opLog>	*/{ -18,    -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
															
            /*88<else>	*/{ -79,    -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*89<else>	*/{ 1038,   -101,   -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*90<else1>	*/{ -43,    1027,   -42,    -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*91<else1>	*/{ 1031,   -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*92<for>	*/{ -43,    1027,   -42,    -39,    1043,   -37,    1032,   -37,    1040,   -38,    -129,  -999 },
            /*93<decasig>	*/{ 1041,   -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*	94<decasig>	*/{ 1043,   -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*95<declaracion>	*/{ 1022,   1042,   -1, 1020,   -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*96<multiples>	*/{ -79,    -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*97<multiples>	*/{ 1042,  1022, -1, -32, -999   ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
															
            /*98<asignación>	*/{ 1044,   -1, -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*99<incremento>	*/{ 1023,   1045,   -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*100<incremento>	*/{ -9, -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*101<incremento>	*/{ -10,    -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*102<opasig>	*/{ -26,    -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*103<opasig>	*/{ -27,    -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*104<opasig>	*/{ -28,    -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*105<opasig>	*/{ -29,    -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*106<opasig>	*/{ -30,    -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*107<while>	*/{ -43,    1027,   -42,    -39,    1032,   -38,    -159,   -999    ,0  ,0  ,0  ,0  },
															
            /*108<do>	*/{ -37,    -39,    1032,   -38,    -159,   -43,    1027,   -42,    -152,   -999    ,0  ,0  },
            /*109<invocar>	*/{ -37,    -39,    1050,   -38,    1049,   -1, -999    ,0  ,0  ,0  ,0  ,0  },
            /*110<obj>	*/{ -1, -33,    -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*111<obj>	*/{ -79,    -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*112<paramobj>	*/{ 1051,  1024,  -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*113<paramobj>	*/{ -79,    -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*114<paramobj1>	*/{ -79,    -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*115<paramobj1>	*/{ 1023,   -32,    -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*116<switch>	*/{ -43,    1053,   -42,    -39,    -1, -38,    -158,   -999    ,0  ,0  ,0  ,0  },
            /*117<CASOS>	*/{ -79,    -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
															
            /*118<CASOS>	*/{ 1053,   1054,   -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*119<CASOS>	*/{ 1053,   1055,   -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*120<CASO>	*/{ -37,    1056, 1027,   -36,    1024,   -116,   -999    ,0  ,0  ,0  ,0  ,0  },
            /*121<DEFAULT>	*/{ -37,    1056, 1027,  -36,    -144,   -999    ,0  ,0  ,0  ,0  ,0  ,0  },
            /*122<RB>	*/{ 1023,   -130,   -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*123<RB>	*/{ -112,   -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*124<Metodos>	*/{    1057,  1058, -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*125<Metodos	*/{ -79,    -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*126<Metodos1>	*/{ 1059,   1064, -999  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0   },
            /*127<Metodos2>	*/{ 1060,   -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
															
            /*128< Metodos3>	*/{ 1014,   -39,     1021,   -38,    -1,     -147,-999,0  ,0  ,0  ,0  ,0   },
            /*129<Void1>	*/{ -37,    -999    ,1  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*130<Void1>	*/{ -43,    1027,   -42,    -999    ,1  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*131< Metodos3>	*/{ 1062,   -1, 1020,   -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*132< Metodos4>	*/{ 1063,   -39,    1021,   -38,    -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*133<Metodos5>	*/{ -37,    -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*134<Metodos5>	*/{ -43, -37,    1023,   -130,   1027,   -42,    -999    ,0    ,0  ,0  ,0  ,0  },
            /*135< Metodos4>	*/{ -37,1022,   -999   ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*136< Metodos4>	*/{ -37,    -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*137<Especificacion1>	*/{ -177,   -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*138<Especificacion1>	*/{ -146,   -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*139<Especificacion1>	*/{ -79,    -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*140<metratibcon1>	*/{ 1018,   -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },
            /*141<metasig> */{ -37,1022, 1042, -999 ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  },

            /*142<metratibcon>*/ { -79,       -999    ,0 ,0 ,0  ,0   ,0  ,0  ,0 ,0  ,0,0 },
           /*143<tipo>*/            { -108,    -999,0,0,0,0,0,0 ,0,0,0,0},
           /*144<tipo>*/            { -134,    -999,0,0,0,0,0,0 ,0,0,0,0},
           /*145<tipo>*/            { -153,    -999,0,0,0,0,0,0 ,0,0,0,0},
           /*146<factor>*/       { -35, -999, 0,0,0,0,0,0 ,0,0,0,0},
         /*. 148<operarit>::*/     { -8, -999, 0,0,0,0,0,0 ,0,0,0,0},
           /* 149<parat> */        {  1015, -39, 1021, -38, -999,0,0,0,0,0,0,0 },
            /* 150<parat> */      {-79, -999,0,0,0,0,0,0 ,0,0,0,0 },
           /*.151 <Miembro>*/          {-79, -999,0,0,0,0,0,0 ,0,0,0,0 },
            /*. 152<metasig>*/          {-79, -999,0,0,0,0,0,0 ,0,0,0,0 },
           /*153	<E/S>	*/{ -37,    1069,   1071,   -36,    -36, -  165,    -999    ,0  ,0  ,0  ,0,0  },
/*154	<Salida>	*/        { -79,    -999    ,0      ,0       ,0     ,0      ,0      ,0  ,0  ,0  ,0,0  },
/*155	<Salida>	*/        { 1070 ,   1024,  -20 ,   -166,  -999,    0  ,    0 ,     0 ,  0  ,0,  0,0},
/*156	<SalidaTermino>	*/{  1070,  1024,   -20, -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0,0  },
/*157	<SalidaTermino>	*/{ -79,    -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0 ,0 },
/*158	<Entrada>	*/{ -1, -   21,     -167,   -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0,0  },
/*159	<Entrada>	*/{ -79,    -999    ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0,0  },

       };
        public Sintactico(List<NodoLexema> listaTokenLexico)
        {
            //inicializo todo para poder empezar el analisis.
            /*listaError = new List<Error>();*/
            listaTokens = listaTokenLexico;
            listaTokens.Add(new NodoLexema() { TextoLexema = "$", Token = 0, Descripcion = "Cadena", Linea = -99 });

            listaSintactico[0] = -99; // estoy insertando $
            listaSintactico[1] = 1000; // S

            /*intentosRecuperar = 0;
            tipoRecuperacion = TipoRepecuracion.Ninguna;*/

            EjecutarSintactico(listaTokens);
        }
        public void EjecutarSintactico(List<NodoLexema> listaTokens)
        {
            //incializo variables locales necesarias
            int ReglaAux = 0;
            int renglon, columna = 0;


            do
            {
                switch (regla)
                {
                    //la regla 24 esta interfiriendo con el metodoOUt, hace que ingrese la regla de variable anted 
                    case 95:
                        sem = TipoSemantico.VariableOn;
                        break;
                    case 108:
                        sem = TipoSemantico.DoOn;
                        break;
                    case 107:
                        sem = TipoSemantico.WhileOn;
                        break;
                    case 92:
                        sem = TipoSemantico.ForOn;
                        break;
                    case 22:
                        sem = TipoSemantico.MetodoOn;
                        break;
                    case 26:
                        sem = TipoSemantico.MetodoOn;
                        break;

                    case 9:
                        sem = TipoSemantico.ClassOn;
                        break;
                    case 141:
                        sem = TipoSemantico.AtributoOn;
                        break;
                    case 73:
                        sem = TipoSemantico.ifOn;
                        break;


                }

                if (listaSintactico[punteroSintactico] < 0)   // el elemento de la lista es un terminal????
                {
                    int x = listaTokens[punteroLexico].Linea;
                    if (listaSintactico[punteroSintactico] == -79)// es lamda ese terminal?
                    {
                        listaSintactico[punteroSintactico] = 0;
                        punteroSintactico--;
                    }
                    else if (listaSintactico[punteroSintactico] == listaTokens[punteroLexico].Linea || ReglaAux < -599)  // los dos son iguales
                    {

                        if (listaSintactico[punteroSintactico] == -99)  // los dos son $
                        {
                            revision = true;
                            if (error)
                            {
                            Herencia();
                            TablaSimbolos.AtributoNoReferenciado();
                            TablaSimbolos.VariableNoReferenciada();
                            Termino = ("Analisis Sintactico Terminado, Con Errores");
                            TablaSimbolos.TSC.Clear();
                            }
                            else
                            Herencia();
                            TablaSimbolos.AtributoNoReferenciado();
                            TablaSimbolos.VariableNoReferenciada();
                            Termino = (@"Analisis Sintactico Terminado Correctamente");
                            TablaSimbolos.TSC.Clear();

                            break;

                        }
                        else    //MATCH (elemento)
                        {


                            MandarSemantico();
                            listaSintactico[punteroSintactico] = 0;
                            punteroLexico++;
                            punteroSintactico--;
                            // VerificarRecuperacion();
                        }
                    }
                    else  // si los dos terminales de la lista token y de la lista sintactico no son iguales
                    {
                        //NuevoError(listaTokens, ref revision, 1);
                    }
                }
                else  // NUMERO POSITIVO : es la parte de traerme la regla del repositorio con ayuda de la matriz
                {
                    renglon = BuscarRenglon(listaSintactico[punteroSintactico]);
                    columna = BuscarColumna(listaTokens[punteroLexico].Linea);

                    regla = MatrizTransicionSintantico[renglon, columna];
                    if (regla < -599)
                    {
                        revision = true;
                        Termino = (@"Analisis Sintactico Terminado, Con Errores");
                        break;
                    }
                    if (regla > 0)  // llamamos a la insersion de reglas.
                    {
                        InsertarRegla(regla);

                        // VerificarRecuperacion();
                    }
                    else  // ejecutarr el manejo de errores
                    {
                        /* if (intentosRecuperar < 1)
                         {
                             tipoRecuperacion = TipoRepecuracion.Sobra;
                         }
                         NuevoError(listaTokens, ref revision, regla);*/
                    }
                }
            } while (revision != true);

        }

    

        private void MandarSemantico()
        {
            int semP = punteroLexico;
            listener.Add(listaTokens[punteroLexico]);

            if (listaTokens[punteroLexico].Linea == -42 && sem == TipoSemantico.MetodoOn)
            {

                sem = TipoSemantico.MetodoOut;
            }

            if (listaTokens[punteroLexico].Linea == -37 && sem == TipoSemantico.AtributoOn)
            {
                sem = TipoSemantico.AtributoOut;
            }
            if (listaTokens[punteroLexico].Linea == -37 && sem == TipoSemantico.VariableOn)
            {
                sem = TipoSemantico.VariableOut;
            }
            if (listaTokens[punteroLexico].Linea == -42 && sem == TipoSemantico.ClassOn)
            {
                sem = TipoSemantico.ClassOut;
            }
            if (listaTokens[punteroLexico].Linea == -42 && sem == TipoSemantico.ifOn)
            {
                sem = TipoSemantico.ifOut;
            }

            if (listaTokens[punteroLexico].Linea == -37 && sem == TipoSemantico.DoOn)
            {
                sem = TipoSemantico.DoOut;
            }
            if (listaTokens[punteroLexico].Linea == -42 && sem == TipoSemantico.WhileOn)
            {
                sem = TipoSemantico.WhileOut;
            }
            if (listaTokens[punteroLexico].Linea == -42 && sem == TipoSemantico.ForOn)
            {
                sem = TipoSemantico.ForOut;
            }





            if (sem == TipoSemantico.ClassOut)
            {

                if (listaTokens[punteroLexico].Linea == -42) {
                    if (listaTokens[semP-2].Linea == -118) {
                       // semP = punteroLexico;
                        NodoClase nuevaClase = new NodoClase();
                        nuevaClase.Lexema = listener[semP - 4].Descripcion;

                        herencia.Add(listener[semP - 1].Descripcion); 
                        nuevaClase.Herencia = listener[semP - 1].Descripcion;
                        nuevaClase.RenglonDec = listener[0].Token;
                        
                        TablaSimbolos.InsertarClase(nuevaClase);
                        claseActual = nuevaClase;
                        sem = TipoSemantico.Ninguno;

                    }
                    else
                    {
                        if (listaTokens[punteroLexico].Linea == -42)
                        {
                           // semP = punteroLexico;
                            NodoClase nuevaClase = new NodoClase();

                            nuevaClase.Lexema = listener[semP - 1].Descripcion;
                            
                            nuevaClase.RenglonDec = listener[semP - 2].Token;
                           
                            TablaSimbolos.InsertarClase(nuevaClase);
                            claseActual = nuevaClase;
                            sem = TipoSemantico.Ninguno;
                         
                        }

                    }


                }

            }

            if(sem == TipoSemantico.MetodoOut)
            {

         
                 List<NodoVariable> parametros = new List<NodoVariable>();
                 NodoMetodo nuevoMetodo = new NodoMetodo();
                 semP = semP - 2;
                 if (listener[semP].Linea == -38)
                 {
                     semP--;
                     nuevoMetodo.Lexema = listener[semP].Descripcion;
                     nuevoMetodo.LineaDec = listener[semP].Token;
                     semP--;
                     nuevoMetodo.MiRegreso = listener[semP].Descripcion;
                     semP--;
                     if (listener[semP].Linea == -36) {
                         nuevoMetodo.miAlcance = listener[semP].Descripcion;
                     }
                     else
                     {
                         nuevoMetodo.miAlcance = "private";
                     }
           
                     TablaSimbolos.InsertarMetodo(nuevoMetodo,claseActual,parametros);
                    metodoActual = nuevoMetodo.Lexema;
                  
                    sem = TipoSemantico.Ninguno;
                }
                 else if (listener[semP].Linea == -1)
                 {

                     do
                     {
                         if (listener[semP].Linea == -32) { semP--; }
                         NodoVariable parametro = new NodoVariable();
                         parametro.Lexema = listener[semP].Descripcion;
                         parametro.MiTipo = listener[semP - 1].Descripcion;
                         parametro.RenglonDec = listener[semP - 1].Token;
                         parametro.EsParametro = true;
                         parametros.Add(parametro);
                         semP = semP - 2;


                     } while (listener[semP].Linea!=-38);
                     semP--;
                     nuevoMetodo.Lexema = listener[semP].Descripcion;
                     nuevoMetodo.LineaDec = listener[semP].Token;
                     semP--;
                     nuevoMetodo.MiRegreso = listener[semP].Descripcion;
                     semP--;
                     if (listener[semP].Linea == -36)
                     {
                         semP--;
                         nuevoMetodo.miAlcance = listener[semP].Descripcion;
                     }
                     else
                     {
                         nuevoMetodo.miAlcance = "private";
                     }

                    TablaSimbolos.InsertarMetodo(nuevoMetodo, claseActual, parametros);
                    metodoActual = nuevoMetodo.Lexema;
  
                    sem = TipoSemantico.Ninguno;
                 }

            }

            if(sem == TipoSemantico.AtributoOut)
            {
             
                NodoAtributo nuevoAtributo = new NodoAtributo();
                if (listener[semP-1].Linea ==-1&&listener[semP - 2].Linea == -149|| listener[semP - 1].Linea == -1 && listener[semP - 2].Linea == -108|| listener[semP - 1].Linea == -1 && listener[semP - 2].Linea == -164|| listener[semP - 1].Linea == -1 && listener[semP - 2].Linea == -156) {

                    nuevoAtributo.Lexema = listener[semP-1].Descripcion;
                    nuevoAtributo.RenglonDec = listener[semP - 1].Token;
                    
                    if (listener[semP-4].Linea == -118)
                    {
                        nuevoAtributo.MiAlcance = "public";
                    }
                    else
                    {
                        nuevoAtributo.MiAlcance = "private";
                    }
                    TablaSimbolos.InsertarAtributoClase(nuevoAtributo,claseActual);
                    sem = TipoSemantico.Ninguno;
                }
                else
                {
                    semP--;
                    do
                    {
                        if(listener[semP].Linea == -7 || listener[semP].Linea == -6|| listener[semP].Linea == -5|| listener[semP].Linea == -4)
                        {
                            semP--;
                        }
                        if (listener[semP].Linea != -1)
                        {
                            nuevoAtributo.Valor.Add(listener[semP].Linea);
                        }
                        else
                        {
                            NodoAtributo atributoBuscado = new NodoAtributo();
                            atributoBuscado =  TablaSimbolos.obtenerNodoAtributo(listener[semP].Descripcion,claseActual,listener[semP].Token);
                            if (atributoBuscado!=null) {
                                atributoBuscado.Referencias.Add(listener[semP].Token);
                             
                            }
                           
                        }
                        semP--;
                    
                    } while (listener[semP].Linea != -26);
                    semP--;
                    if (listener[semP].Linea == -1)
                    {
                        semP--;
                        if(listener[semP].Linea == -149 || listener[semP].Linea == -108|| listener[semP].Linea == -156|| listener[semP].Linea == -164)
                        {
                            nuevoAtributo.Lexema = listener[semP + 1].Descripcion;
                            nuevoAtributo.RenglonDec = listener[semP].Token;
                            nuevoAtributo.MiTipo = listener[semP].Descripcion;
                            semP = semP - 2;
                            if (listener[semP].Linea == -118) {
                                nuevoAtributo.MiAlcance = "public";
                            }
                            else
                            {
                                nuevoAtributo.MiAlcance = "private";
                            }
                            TablaSimbolos.InsertarAtributoClase(nuevoAtributo,claseActual);
                            sem = TipoSemantico.Ninguno;
                        }
                        else
                        {//hace falta arreglar sintactico para que acepte variable ya declaradas que solo se estan inicializando como a = 6;
                            NodoAtributo atributoBuscado = new NodoAtributo();
                            atributoBuscado = TablaSimbolos.obtenerNodoAtributo(listener[semP+1].Descripcion,claseActual,listener[semP+1].Token);
                        }
                    }


                }
                
          

            }

            if (sem == TipoSemantico.VariableOut)
            {

                NodoVariable nuevaVariable = new NodoVariable();
                metodoListado = TablaSimbolos.ObtenerMetodo(metodoActual, claseActual.Lexema);
                bool conSobrecarga = metodoListado.sobrecarga.Any();
                contSobrecarga = metodoListado.Sobrecarga.Count();
                

                if (listener[semP - 1].Linea == -1 && listener[semP - 2].Linea == -149 || listener[semP - 1].Linea == -1 && listener[semP - 2].Linea == -108 || listener[semP - 1].Linea == -1 && listener[semP - 2].Linea == -164 || listener[semP - 1].Linea == -1 && listener[semP - 2].Linea == -156)
                {

                    nuevaVariable.Lexema = listener[semP - 1].Descripcion;
                    nuevaVariable.RenglonDec = listener[semP - 1].Token;
                    nuevaVariable.EsParametro = false;
                    if (conSobrecarga)
                    {

                        sobrecargaActual = metodoListado.Sobrecarga.ElementAt(contSobrecarga - 1);
                        

                        TablaSimbolos.InsertarVariableSobrecarga(claseActual,metodoActual,nuevaVariable);
                        sem = TipoSemantico.Ninguno;
                    }
                    else
                    {
                        TablaSimbolos.InsertarVariableMetodo(claseActual,metodoListado,nuevaVariable);
                        sem = TipoSemantico.Ninguno;
                    }
                   

                }
                else
                {
                    semP--;
                    do
                    {
                        if (listener[semP].Linea == -7 || listener[semP].Linea == -6 || listener[semP].Linea == -5 || listener[semP].Linea == -4)
                        {
                            semP--;
                        }
                        if (listener[semP].Linea != -1)
                        {
                            nuevaVariable.Valor.Add(listener[semP].Linea);
                        }
                        else
                        {//ERROR falta preguntar si hay sobrecarga
                            NodoVariable variableBuscada = new NodoVariable();
                            if (conSobrecarga) 
                            {
                                
                                variableBuscada = TablaSimbolos.ObtenerVariableSobrecarga(listener[semP].Descripcion, metodoActual, claseActual, listener[semP].Token);
                            }
                            else
                            {
                                variableBuscada = TablaSimbolos.ObtenerVariableMetodo(listener[semP].Descripcion, metodoActual, claseActual, listener[semP].Token);
                            }

           
                            if (variableBuscada != null)
                            {
                                variableBuscada.Referencias.Add(listener[semP].Token);

                            }

                        }
                        semP--;

                    } while (listener[semP].Linea != -26);
                    semP--;
                    if (listener[semP].Linea == -1)
                    {
                        semP--;
                        if (listener[semP].Linea == -149 || listener[semP].Linea == -108 || listener[semP].Linea == -156 || listener[semP].Linea == -164)
                        {
                            nuevaVariable.Lexema = listener[semP + 1].Descripcion;
                            nuevaVariable.RenglonDec = listener[semP].Token;
                            nuevaVariable.MiTipo = listener[semP].Descripcion;
                            nuevaVariable.EsParametro = false;
                            semP = semP - 2;

                            if (conSobrecarga)
                            {

                                sobrecargaActual = metodoListado.Sobrecarga.ElementAt(contSobrecarga - 1);


                                TablaSimbolos.InsertarVariableSobrecarga(claseActual, metodoActual, nuevaVariable);
                                sem = TipoSemantico.Ninguno;
                            }
                            else
                            {
                                TablaSimbolos.InsertarVariableMetodo(claseActual, metodoListado, nuevaVariable);
                                sem = TipoSemantico.Ninguno;
                            }

                            sem = TipoSemantico.Ninguno;
                        }
                        else
                        {//hace falta arreglar sintactico para que acepte variable ya declaradas que solo se estan inicializando como a = 6;
                            NodoAtributo atributoBuscado = new NodoAtributo();
                            atributoBuscado = TablaSimbolos.obtenerNodoAtributo(listener[semP + 1].Descripcion, claseActual, listener[semP + 1].Token);
                        }
                    }


                }


              

            }

            if (sem == TipoSemantico.ifOut)
            {
                //falta validar si la variable es agregada en sobrecarga por eso marca error de variable 
              
                metodoSentencia = TablaSimbolos.ObtenerMetodo(metodoActual, claseActual.Lexema);
                contadorSentencia = metodoSentencia.Sobrecarga.Count;
                ConSobrecarga = metodoSentencia.Sobrecarga.Any();
                if (ConSobrecarga)
                {
                    sobrecargaSentencia = metodoSentencia.Sobrecarga.ElementAt(contadorSentencia-1);
                    if (listener[semP - 2].Linea == -1)
                    {
                        variableSentencia = TablaSimbolos.ObtenerVariableSobrecarga(listener[semP - 2].Descripcion, metodoActual, claseActual,listener[semP - 2].Token);
                        if (variableSentencia != null)
                        {
                            variableSentencia.Referencias.Add(listener[semP - 2].Token);
                            sem = TipoSemantico.Ninguno;
                        }
                    }
                    if (listener[semP - 4].Linea == -1)
                    {

                        variableSentencia = TablaSimbolos.ObtenerVariableSobrecarga(listener[semP - 4].Descripcion, metodoActual, claseActual, listener[semP - 4].Token);
                        if (variableSentencia != null)
                        {
                            variableSentencia.Referencias.Add(listener[semP - 4].Token);
                            sem = TipoSemantico.Ninguno;
                        }
                    }
           
                }
                else
                {
                    if (listener[semP - 2].Linea == -1)
                    {
                        variableSentencia = TablaSimbolos.ObtenerVariableMetodo(listener[semP - 2].Descripcion, metodoActual, claseActual, listener[semP - 2].Token);
                        if (variableSentencia != null)
                        {
                            variableSentencia.Referencias.Add(listener[semP - 2].Token);
                            sem = TipoSemantico.Ninguno;
                        }
                    }
                    if (listener[semP - 4].Linea == -1)
                    {

                        variableSentencia = TablaSimbolos.ObtenerVariableMetodo(listener[semP - 4].Descripcion, metodoActual, claseActual, listener[semP - 4].Token);
                        if (variableSentencia != null)
                        {
                            variableSentencia.Referencias.Add(listener[semP - 4].Token);
                            sem = TipoSemantico.Ninguno;
                        }
                    }

                }
             
            }

            if(sem == TipoSemantico.DoOut)
            {
                //falta validar si la variable es agregada en sobrecarga por eso marca error de variable 
            
                metodoSentencia = TablaSimbolos.ObtenerMetodo(metodoActual, claseActual.Lexema);
                contadorSentencia = metodoSentencia.Sobrecarga.Count;
                ConSobrecarga = metodoSentencia.Sobrecarga.Any();
                if (ConSobrecarga)
                {
                    sobrecargaSentencia = metodoSentencia.Sobrecarga.ElementAt(contadorSentencia - 1);
                    if (listener[semP - 2].Linea == -1)
                    {
                        variableSentencia = TablaSimbolos.ObtenerVariableSobrecarga(listener[semP - 2].Descripcion, metodoActual, claseActual, listener[semP - 2].Token);
                        if (variableSentencia != null)
                        {
                            variableSentencia.Referencias.Add(listener[semP - 2].Token);
                            sem = TipoSemantico.Ninguno;
                        }
                    }
                    if (listener[semP - 4].Linea == -1)
                    {
                        variableSentencia = TablaSimbolos.ObtenerVariableSobrecarga(listener[semP - 4].Descripcion, metodoActual, claseActual, listener[semP - 4].Token);
                        if (variableSentencia != null)
                        {
                            variableSentencia.Referencias.Add(listener[semP - 4].Token);
                            sem = TipoSemantico.Ninguno;
                        }
                    }

                }
                else
                {
                    if (listener[semP - 2].Linea == -1)
                    {
                        variableSentencia = TablaSimbolos.ObtenerVariableMetodo(listener[semP - 2].Descripcion, metodoActual, claseActual, listener[semP - 2].Token);
                        if (variableSentencia != null)
                        {
                            variableSentencia.Referencias.Add(listener[semP - 2].Token);
                            sem = TipoSemantico.Ninguno;
                        }
                    }
                    if (listener[semP - 4].Linea == -1)
                    {

                        variableSentencia = TablaSimbolos.ObtenerVariableMetodo(listener[semP - 4].Descripcion, metodoActual, claseActual, listener[semP - 4].Token);
                        if (variableSentencia != null)
                        {
                            variableSentencia.Referencias.Add(listener[semP - 4].Token);
                            sem = TipoSemantico.Ninguno;
                        }
                    }

                }
            }

            if (sem == TipoSemantico.WhileOut)
            {

                metodoSentencia = TablaSimbolos.ObtenerMetodo(metodoActual, claseActual.Lexema);
                contadorSentencia = metodoSentencia.Sobrecarga.Count;
                ConSobrecarga = metodoSentencia.Sobrecarga.Any();
                if (ConSobrecarga)
                {
                    sobrecargaSentencia = metodoSentencia.Sobrecarga.ElementAt(contadorSentencia - 1);
                    if (listener[semP - 2].Linea == -1)
                    {
                        variableSentencia = TablaSimbolos.ObtenerVariableSobrecarga(listener[semP - 2].Descripcion, metodoActual, claseActual, listener[semP - 2].Token);
                        if (variableSentencia != null)
                        {
                            variableSentencia.Referencias.Add(listener[semP - 2].Token);
                            sem = TipoSemantico.Ninguno;
                        }
                    }
                    if (listener[semP - 4].Linea == -1)
                    {

                        variableSentencia = TablaSimbolos.ObtenerVariableSobrecarga(listener[semP - 4].Descripcion, metodoActual, claseActual, listener[semP - 4].Token);
                        if (variableSentencia != null)
                        {
                            variableSentencia.Referencias.Add(listener[semP - 4].Token);
                            sem = TipoSemantico.Ninguno;
                        }
                    }

                }
                else
                {
                    if (listener[semP - 2].Linea == -1)
                    {
                        variableSentencia = TablaSimbolos.ObtenerVariableMetodo(listener[semP - 2].Descripcion, metodoActual, claseActual, listener[semP - 2].Token);
                        if (variableSentencia != null)
                        {
                            variableSentencia.Referencias.Add(listener[semP - 2].Token);
                            sem = TipoSemantico.Ninguno;
                        }
                    }
                    if (listener[semP - 4].Linea == -1)
                    {

                        variableSentencia = TablaSimbolos.ObtenerVariableMetodo(listener[semP - 4].Descripcion, metodoActual, claseActual, listener[semP - 4].Token);
                        if (variableSentencia != null)
                        {
                            variableSentencia.Referencias.Add(listener[semP - 4].Token);
                            sem = TipoSemantico.Ninguno;
                        }
                    }

                }
            }

            if (sem == TipoSemantico.ForOut)
            {
                metodoSentencia = TablaSimbolos.ObtenerMetodo(metodoActual, claseActual.Lexema);
                contadorSentencia = metodoSentencia.Sobrecarga.Count;
                ConSobrecarga = metodoSentencia.Sobrecarga.Any();
                if (ConSobrecarga)
                {
                    sobrecargaSentencia = metodoSentencia.Sobrecarga.ElementAt(contadorSentencia - 1);
                    if (listener[semP - 2].Linea == -1)
                    {
                        variableSentencia = TablaSimbolos.ObtenerVariableSobrecarga(listener[semP - 2].Descripcion, metodoActual, claseActual, listener[semP - 2].Token);
                        if (variableSentencia != null)
                        {
                            variableSentencia.Referencias.Add(listener[semP - 2].Token);
                            sem = TipoSemantico.Ninguno;
                        }
                    }
                    if (listener[semP - 4].Linea == -1)
                    {

                        variableSentencia = TablaSimbolos.ObtenerVariableSobrecarga(listener[semP - 4].Descripcion, metodoActual, claseActual, listener[semP - 4].Token);
                        if (variableSentencia != null)
                        {
                            variableSentencia.Referencias.Add(listener[semP - 4].Token);
                            sem = TipoSemantico.Ninguno;
                        }
                    }

                }
                else
                {
                    if (listener[semP - 14].Linea == -1)
                    {
                        variableSentencia = TablaSimbolos.ObtenerVariableMetodo(listener[semP - 2].Descripcion, metodoActual, claseActual, listener[semP - 2].Token);
                        if (variableSentencia != null)
                        {
                            variableSentencia.Referencias.Add(listener[semP - 2].Token);
                            sem = TipoSemantico.Ninguno;
                        }
                    }
                    if (listener[semP - 4].Linea == -1)
                    {

                        variableSentencia = TablaSimbolos.ObtenerVariableMetodo(listener[semP - 4].Descripcion, metodoActual, claseActual, listener[semP - 4].Token);
                        if (variableSentencia != null)
                        {
                            variableSentencia.Referencias.Add(listener[semP - 4].Token);
                            sem = TipoSemantico.Ninguno;
                        }
                    }

                }
            }

        }
        private void Herencia()
        {
            for (int i = 0; i < herencia.Count; i++)
            {
                TablaSimbolos.BuscarHerencia(herencia.ElementAt(i), claseActual);
            }
        }
        private void InsertarRegla(int regla)
        {
            int i = 0;
            do
            {
                listaSintactico[punteroSintactico] = RepositorioReglas[regla - 1, i];
                int x = RepositorioReglas[regla - 1, i];
                punteroSintactico++;
                i++;

            } while (RepositorioReglas[regla - 1, i] != -999);
            punteroSintactico--;


         }
        private int BuscarColumna(int token)
        {
            int x = token;
            switch (token)
            {
                case -1: /*id*/
                    return 0;
                case -2: /*ent*/
                    return 1;
                case -3: /*dec*/
                    return 2;
                case -4: //+
                    return 3; ;
                case -5://-
                    return 4;
                case -6://*
                    return 5;
                case -7:// /
                    return 6;
                case -8:// %
                    return 7;
                case -9://++
                    return 8;
                case -10://--
                    return 9;
                case -11://==
                    return 10;
                case -12://!=
                    return 11;
                case -13://>
                    return 12;
                case -14://<
                    return 13;
                case -15://>=
                    return 14;
                case -16://<=
                    return 15;
                case -17://&&
                    return 16;
                case -18://||
                    return 17;
                case -19://!
                    return 18 ;
                case -20://<<
                    return 19;
                case -21://>>
                    return 20;
                case -22://~
                    return 21;
                case -23://&
                    return 22;
                case -24://^
                    return 23;
                case -25://|
                    return 24;
                case -26://=
                    return 25;
                case -27://+=
                    return 26;
                case -28://-=
                    return 27;
                case -29://*=
                    return 28;
                case -30:// /=
                    return 29;
                case -31:// %= 
                    return 30;
                case -32:// ,
                    return 31;
                case -33://.
                    return 32;
                case -34://“…”
                    return 33;
                case -35://‘…’
                    return 34;
                case -36://:
                    return 35;
                case -37://;
                    return 36;
                case -38://(
                    return 37;
                case -39://)
                    return 38;
                case -40://[
                    return 39;
                case -41://]
                    return 40;
                case -42://{
                    return 41;
                case -43://}
                    return 42;
               
                case -100://asm(-100)
                    return 43;
                case -101://else(-101)
                    return 44;
                case -102://new(-102)
                    return 45;
                case -103://This(-103)
                    return 46;
                case -104://auto(-104)
                    return 47;
                case -105://enum(-105)
                    return 48;
                case -106://operator(-106)
                    return 49;
                case -107://Throw(-107)
                    return 50;
                case -108://bool(-108)
                    return 51;
                case -109://explicit(-109)
                    return 52;
                case -110://private(-110)
                    return 53;
                case -111://true(-111)
                    return 54;
                case -112://break(-112)
                    return 55;
                case -113://export(-113)
                    return 56;
                case -114://protected(-114)
                    return 57;
                case -115://try(-115)
                    return 58;
                case -116://case(-116)
                    return 59;
                case -117://extern(-117)
                    return 60;
                case -118://public(-118)
                    return 61;
                case -119://typedef(-119)
                    return 62;
                case -120://catch(-120)
                    return 63;
                case -121://false(-121)
                    return 64;
                case -122://register(-122)
                    return 65;
                case -123://typeid(-123)
                    return 66;
                case -124://char(-124)
                    return 67;
                case -125://float(-125)
                    return 68;
                case -126://reinterpret_cast(-126)
                    return 69;
                case -127://typename(-127)
                    return 70;
                case -128://class(-128)
                    return 71;
                case -129://for(-129)
                    return 72;
                case -130://return(-130)
                    return 73;
                case -131://union(-131)
                    return 74;
                case -132://const(-132)
                    return 75;
                case -133://friend (-133)
                    return 76;
                case -134://short(-134)
                    return 77;
                case -135://unsigned(-135)
                    return 78;
                case -136://const_cast(-136)
                    return 79;
                case -137://goto(-137)
                    return 80;
                case -138://signed(-138)
                    return 81;
                case -139://using(-139)
                    return 82;
                case -140://continue(-140)
                    return 83;
                case -141://if(-141)
                    return 84;
                case -142://sizeof(-142)
                    return 85;
                case -143://Virtual(-143)
                    return 86;
                case -144://default(-144)
                    return 87;
                case -145://inline(-145)
                    return 88;
                case -146://static(-146)
                    return 89;
                case -147://Void(-147)
                    return 90;
                case -148://delete(-148)
                    return 91;
                case -149://int(-149)
                    return 92;
                case -150://static_cast(-150)
                    return 93;
                case -151://Volatile(-151)
                    return 94;
                case -152://do(-152)
                    return 95;
                case -153://long(-153)
                    return 96;
                case -154://struct(-154)
                    return 97;
                case -155://wchar_t(-155)
                    return 98;
                case -156://double(-156)
                    return 99;
                case -157://mutable(-157)
                    return 100;
                case -158://switch(-158)
                    return 101;
                case -159://While(-159)
                    return 102;
                case -160://dynamic_cast(-160)
                    return 103;
                case -161://namespace(-161)
                    return 104;
                case -162://template(-162)
                    return 105;
                case -163://#include(-163)
                    return 106;
                case -164://string(-164)
                    return 107;
                case -99: //$
                    return 108;
                 case -165: //std(-165)
                    return 109;
                case -166: //cout(-166)
                    return 110;
                case -167: //cin(-167)
                    return 111;
                default:
                    return 0;


            }
            }
        private int BuscarRenglon(int regla)
        {
                switch (regla)
            {
                case 1000://s
                    return 0;
                case 1001://Programa
                    return 1;
                case 1002://Librerias
                    return 2;
                case 1003://Librería
                    return 3;
                case 1004://<clases>
                    return 4;
                case 1005://<clases1>
                    return 5;
                case 1006://<clase>
                    return 6;
                case 1007://<herencia>
                    return 7;
                case 1008://<alcance>
                    return 8;
                case 1009://<miembros>
                    return 9;
                case 1010://<miembro>
                    return 10;
                case 1011://<metratibcon> 
                    return 11;
                case 1012://<alcance1>
                    return 12;
                case 1013://<metratibcon1>
                    return 13;
                case 1014://<metvoid>
                    return 14;
                case 1015://<metratibcon2>
                    return 15;
                case 1016://<devuelve>
                    return 16;
                case 1017://<Especificacion>
                    return 17;
                case 1018://< concstructor >
                    return 18;
                case 1019://<parámetros1>
                    return 19;
                case 1020://<tipo>
                    return 20;
                case 1021://<parámetros>
                    return 21;
                case 1022://<asignacion1> 
                    return 22;
                case 1023://<exp> 
                    return 23;
                case 1024://<factor> 
                    return 24;
                case 1025://<termino>
                    return 25;
                case 1026://<operarit>
                    return 26;
                case 1027://<sentencias>
                    return 27;
                case 1028://<sentencia>
                    return 28;
                case 1029://<valores>
                    return 29;
                case 1030://<valores1>
                    return 30;
                case 1031://<if> 
                    return 31;
                case 1032://<condiciona> 
                    return 32;
                case 1033://<factorCond>
                    return 33;
                case 1034://<terminoCond>
                    return 34;
                case 1035://<oprel> 
                    return 35;
                case 1036://<opLog> 
                    return 36;
                case 1037://<else> 
                    return 37;
                case 1038://<else1>
                    return 38;
                case 1039://<for>
                    return 39;
                case 1040://<decasig> 
                    return 40;
                case 1041://<declaracion> 
                    return 41;
                case 1042://<multiples> 
                    return 42;
                case 1043://<asignación>
                    return 43;
                case 1044://<incremento>
                    return 44;
                case 1045://<opasig>
                    return 45;
                case 1046://<while>
                    return 46;
                case 1047://<do> 
                    return 47;
                case 1048://<invocar> 
                    return 48;
                case 1049://<obj>
                    return 49;
                case 1050://<paramobj>
                    return 50;
                case 1051://<paramobj1>
                    return 51;
                case 1052://<switch>
                    return 52;
                case 1053://<CASOS> 
                    return 53;
                case 1054://<CASO>
                    return 54;
                case 1055://<DEFAULT> 
                    return 55;
                case 1056://<RB> 
                    return 56;
                case 1057://<Metodos>
                    return 57;
                case 1058://<Metodos1>
                    return 58;
                case 1059://<Metodos2>
                    return 59;
                case 1060://<Metodos3>
                    return 60;
                case 1061://<Void1>
                    return 61;
                case 1062://<Metodos4>
                    return 62;
                case 1063://<Metodos5> 
                    return 63;
                case 1064://<Especificacion1>
                    return 64;
                case 1065://<try>
                    return 65;
                case 1066:
                    return 66;//<metasig>
                case 1067:
                    return 67;//<parat>
                case 1068:
                    return 68;//<E/S>
                case 1069:
                    return 69;//<Salida>
                case 1070:
                    return 70;//<SalidaTermino>
                case 1071:
                    return 71;//<Entrada>


                default:
                    throw new Exception("error de logica");
            }

        }

    }

        public enum TipoSemantico
    {
        ClassOn,
        ClassOut,
        AtributoOn,
        AtributoOut,
        MetodoOn,
        MetodoOut,
        MetodoOvariable,
        VariableOn,
        VariableOut,
        ifOn,
        ifOut,
        DoOn,
        DoOut,
        WhileOn,
        WhileOut,
        ForOn,
        ForOut,
        Ninguno
    }
}
